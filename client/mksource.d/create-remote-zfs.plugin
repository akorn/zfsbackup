this_plugin=create-remote-zfs

function create-remote-zfs-init() {
	REMOTEBACKUPPOOL=${REMOTEBACKUPPOOL:-backup}
	REMOTEBACKUPPATH=${REMOTEBACKUPPATH:-"$(hostname)"}
	CREATEREMOTEZFS=${CREATEREMOTEZFS:-false}
	BACKUPOWNER=${BACKUPOWNER:-nobody:nogroup}
	param_description[BACKUPOWNER]="the user and group that should own the top-level backup directory on the backup server when using fake-super (--backup-owner)"
	param_description[BACKUPSERVERNAME]="hostname of the backup server (autodetected from rsync url)"
	param_description[acltype]="zfs creation option we use (autogenerated from zbNOACLS/zbFORCEACLS)"
	param_description[xattrs]="zfs creation option we use (autogenerated) from zbNOXATTRS/zbFORCEXATTRS/zbFORCEACLS)"
}

function create-remote-zfs-usage() {
	echo "Arguments understood by plugin $this_plugin:"
	echo "--backup-owner		The user and group that should own the top-level backup directory on the backup server when using fake-super"
	echo "--create-remote-zfs	Try to ssh into backup server and create the target filesystem there (default: $CREATEREMOTEZFS)"
	echo "--no-create-remote-zfs	Do not try to ssh into backup server to create the target filesystem"
}

function create-remote-zfs-parseargs() {
	((zbTRACE)) && dump_state "create-remote-zfs-parseargs() top"
	case "$1" in
		--backup-owner)		BACKUPOWNER="$2"; parsed=1; shift=1;;
		--create-remote-zfs)	CREATEREMOTEZFS=true; parsed=1;;
		--no-create-remote-zfs)	CREATEREMOTEZFS=false; parsed=1;;
	esac
	((zbTRACE)) && dump_state "create-remote-zfs-parseargs() bottom"
}

function create-remote-zfs-populate_sourcedir_bottom() {
	local -a acltype xattrs
	[[ "$zbNOACLS" = "1" ]] && acltype=(-o acltype=noacl)
	[[ "$zbNOXATTRS" = "1" ]] && xattrs=(-o xattr=off)
	[[ "$zbFORCEXATTRS" = "1" ]] && xattrs=(-o xattr=sa)
	[[ "$zbFORCEACLS" = "1" ]] && xattrs=(-o xattr=sa) && acltype=(-o acltype=posixacl)

	((zbTRACE)) && dump_state "create-remote-zfs-populate_sourcedir_bottom() top"

	if [[ "$CREATEREMOTEZFS" = "true" ]]; then
		BACKUPSERVERNAME=${${zbURL##rsync://}%%/*}
		((zbTRACE)) && dump_state "create-remote-zfs-populate_sourcedir_bottom()"
		if [[ -n "$BACKUPSERVERNAME" ]]; then
			((zbTRACE)) && echo "Trying to run\n${YELLOW}ssh $BACKUPSERVERNAME zfs create -p $xattrs $acltype $zbZFSPROPS $REMOTEBACKUPPOOL/${REMOTEBACKUPPATHPREFIX:+$REMOTEBACKUPPATHPREFIX/}$REMOTEBACKUPPATH${NO_COLOR}"
			if do_or_print ssh "$BACKUPSERVERNAME" zfs create -p $xattrs $acltype $zbZFSPROPS $REMOTEBACKUPPOOL/${REMOTEBACKUPPATHPREFIX:+$REMOTEBACKUPPATHPREFIX/}$REMOTEBACKUPPATH; then
				# zbFAKESUPER can be inherited from zfsbackup-create-source; if it is, it takes precedence over the client.conf setting (FAKESUPER)
				if [[ "$zbFAKESUPER" = "1" ]] || { [[ -z "$zbFAKESUPER" ]] && [[ "$FAKESUPER" = "true" ]] }; then
					do_or_print ssh "$BACKUPSERVERNAME" chown $BACKUPOWNER '/$REMOTEBACKUPPOOL/${REMOTEBACKUPPATHPREFIX:+$REMOTEBACKUPPATHPREFIX/}$REMOTEBACKUPPATH'
				fi
				return
			else
				echo "WARNING: creating remote fs failed." >&2
			fi # if the ssh command didn't succeed, we'll print the instructions to create the remote fs manually, below
		else
			echo "ERROR: I'm supposed to create the remote zfs dataset but I'm unable to figure out the hostname of your backup server." >&2
		fi
	fi

	# Not reached if fs created on remote server via ssh.
	echo "Run the following command on ${BACKUPSERVERNAME:-your backup server} to create the zfs instance we'll back $zbSOURCENAME up to:"
	echo -n "$YELLOW"zfs create -p $xattrs $acltype $zbZFSPROPS "$REMOTEBACKUPPOOL/${REMOTEBACKUPPATHPREFIX:+$REMOTEBACKUPPATHPREFIX/}$REMOTEBACKUPPATH"
	if [[ "$zbFAKESUPER" = "1" ]] || { [[ -z "$zbFAKESUPER" ]] && [[ "$FAKESUPER" = "true" ]] }; then
		echo
		echo "chown $BACKUPOWNER '/$REMOTEBACKUPPOOL/${REMOTEBACKUPPATHPREFIX:+$REMOTEBACKUPPATHPREFIX/}$REMOTEBACKUPPATH'"
	fi
	echo "$NO_COLOR\n"
	((zbTRACE)) && dump_state "create-remote-zfs-populate_sourcedir_bottom() bottom"
}
