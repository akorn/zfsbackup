#!/bin/zsh

# TODO: if creating recursive backups of a tree of filesystems, add "-r" to make-snapshot invocation

# defaults
REMOTEBACKUPPOOL=backup         # first path component on remote server, e.g. /backup
REMOTEBACKUPPATH="$(hostname)"  # 2nd path component on remote server, e.g. /backup/thishost
REMOTE_APPEND_RSYNCD_CONF=false # if set to true, try to ssh to remote server and write to rsyncd.conf there
CLIENTNAME=$(hostname -f)       # used to generate 'hosts allow = ' line in rsyncd.conf stanza
FAKESUPER=true                  # whether to use xattrs on the server to store file attributes, by setting "fake super = yes"

# we'll use these pretty colours to make copy-pasteable parts of the output easily distinguishable
if autoload colors && colors 2>/dev/null ; then
	BLUE="${fg_bold[blue]}"
	RED="${fg_bold[red]}"
	GREEN="${fg_bold[green]}"
	CYAN="${fg_bold[cyan]}"
	MAGENTA="${fg_bold[magenta]}"
	YELLOW="${fg_bold[yellow]}"
	WHITE="${fg_bold[white]}"
	NO_COLOR="${reset_color}"
fi

# override defaults using a configfile
[[ -r /etc/zfsbackup/client.conf ]] && . /etc/zfsbackup/client.conf

# disabling "fake super" involves explicitly setting uid and gid to 0
if [[ "$FAKESUPER" = "false" ]] || [[ "$zbFAKESUPER" = "0" ]]; then
	nofakesuper="fake super = false
uid = 0
gid = 0
"
fi

function create_stanza() {
cat <<EOF

[$BACKUPMODULE]
path = /$REMOTEBACKUPPOOL/$REMOTEBACKUPPATH/${zbSOURCENAME:t}
hosts allow = $CLIENTNAME
read only = false
write only = true
post-xfer exec = /var/lib/svn-checkout/misc-scripts/zfsbackup/server/make-snapshot
auth users = $zbUSERNAME
max connections = 1
$nofakesuper
lock file = /run/lock/rsync.$BACKUPMODULE.lock
EOF

RESTOREMODULE="${BACKUPMODULE/backup_/restore_}"
[[ "$BACKUPMODULE" = "$RESTOREMODULE" ]] && return 0
RESTOREUSER=${zbUSERNAME/-writer/-reader}

cat <<EOF
[$RESTOREMODULE]
path = /$REMOTEBACKUPPOOL/$REMOTEBACKUPPATH/${zbSOURCENAME:t}
hosts allow = $CLIENTNAME
read only = true
write only = false
auth users = $RESTOREUSER
max connections = 1
$nofakesuper
lock file = /run/lock/rsync.$RESTOREMODULE.lock
EOF
}

BACKUPSERVER="$(sed 's@rsync://@@;s@/.*@@' <"$zbSOURCENAME"/url)"
BACKUPMODULE="$(cut -d/ -f4 <"$zbSOURCENAME"/url)"
REMOTESUBDIR=${REMOTESUBDIR:-$(hostname)}
REMOTERSYNCDCONF=${REMOTERSYNCDCONF:-/etc/rsyncd/conf.d/$REMOTESUBDIR/${zbSOURCENAME:t}}
if [[ "$REMOTE_APPEND_RSYNCD_CONF" = "true" ]]; then
	echo "Attempting to append an appropriate rsyncd.conf stanza to $REMOTERSYNCDCONF on $BACKUPSERVER..."
	ssh "$BACKUPSERVER" mkdir -p ${REMOTERSYNCDCONF:h}
	create_stanza | ssh "$BACKUPSERVER" cat \>\> $REMOTERSYNCDCONF
	ssh "$BACKUPSERVER" sh -c "'cd /etc/rsyncd && make'"
else
	echo "Please append something like the following to $REMOTERSYNCDCONF on $BACKUPSERVER:"
	echo "$YELLOW"
	create_stanza
	echo "$NO_COLOR"
fi
echo
