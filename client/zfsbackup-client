#!/bin/zsh
#
# usage: zfsbackup-client [ --server server1[,server2[,...]] ] [ source1 [ source2 [ ... ] ] ]

SOURCES=/etc/zfsbackup/sources.d
DEFAULT_LOGFORMAT="%B %U:%G %M %l %o %i %C	%f%L"
LOG_LEVEL=${LOG_LEVEL:-debug}	# override in /etc/zfsbackup/client.conf; set to "debug" during development (TODO: change default once done debugging)
USE_SYSLOG=1
DEFAULT_FUNCTIONS=/usr/local/share/zfsbackup/functions.zsh

# An array we'll put the names of the servers we're asked to back up to in.
typeset -U backupservers BACKUPSERVERS
typeset -A source_to_server # a hash whose keys are source names and whose values are servers names
typeset -U sources_to_backup

. $DEFAULT_FUNCTIONS
# we source the config once here, to seed the backupservers array
[[ -r /etc/zfsbackup/client.conf ]] && . /etc/zfsbackup/client.conf
[[ -n $USER_FUNCTIONS ]] && [[ -r $USER_FUNCTIONS ]] && . $USER_FUNCTIONS	# allow user functions to override default functions

# The backupservers array will be overridden by servers specified on the command line; the all-capital BACKUPSERVERS array is specified in the config, which we re-source a number of times.
# "backupservers" will default to the set of all configured servers:
backupservers=($BACKUPSERVERS[@])
final_exit_status=0

zmodload zsh/mapfile
zmodload zsh/datetime
zmodload zsh/system

me="zfsbackup-client"

function update_metadata() { # fetches source related metadata from current directory and exports it in environment variables
	if [[ -z "$preclient_exit" ]]; then # running for first time
		export fsuuid=UNKNOWN; [[ -e fsuuid ]] && fsuuid=$(< fsuuid)
		fstype=$(findmnt -n -o FSTYPE ./path/.) || fstype=UNKNOWN
		export fstype
	else # pre-client already run; some of the above may have changed as a result
		if [[ -e fsuuid ]]; then
			fsuuid=$(< fsuuid)
			# the following elif branch doesn't make sense before running pre-client as the fs to be backed up may not even be mounted yet
		elif \
			   ! fsuuid=$(findmnt ./path/. -n -o UUID) \
			&& ! fsuuid=$(findmnt ./path/. -n -o SOURCE); then	# zfs path name
			fsuuid=$(readlink -f ./path/.)	# last resort, for example if we're only backing up a subdirectory
			# maybe instead of trying to shoehorn something useful into fsuuid, we should export all data returned by findmnt instead?
		fi
		fstype=$(findmnt -n -o FSTYPE ./path/.) || fstype=UNKNOWN
		if [[ $fstype = zfs ]]; then	# if zfs, see if we backed up a snapshot
			local source=$(findmnt -n -o SOURCE ./path/.)
			if [[ $source =~ .@. ]]; then	# there must be at least one character before and after the @ for it to be a valid zfs snapshot name
				export snapshot_name=$source
				export snapshot_created=$(zfs get -Hp -o value creation $source)
			else
				unset snapshot_name snapshot_created
			fi
		fi
	fi
}

function process_source() { # handles backup of a single sources.d directory; calls itself for subjobs, if any
	local zbSOURCENAME="$1"
	local me="zfsbackup: $zbSOURCENAME"
	# we have to source the config here so that $BACKUPSERVER
	# can be expanded in it where needed
	[[ -r /etc/zfsbackup/client.conf ]] && . /etc/zfsbackup/client.conf

	export zbSOURCENAME # make this available to pre-client and post-client scripts
	local -a rsync_options
	local USER
	local preclient_exit preclientd_exit postclient_exit postclientd_exit
	local rsync_exit ss_exit subsource_exit		# could use a hash to record the exit status of each sub-source spearately; would this be useful/necessary?
	log info "processing $zbSOURCENAME."
	cd "$zbSOURCENAME" || {
		log warning "can't chdir to $zbSOURCENAME. Skipping."
		return 2
	}
	[[ -r url ]] || {
		log err "$zbSOURCENAME is missing url. Skipping." >&2
		return 3
	}
	url="$(head -n 1 url)"
	[[ -r bwlimit ]] && rsync_options=($rsync_options --bwlimit="$(<bwlimit)")
	[[ -e compress ]] && rsync_options=($rsync_options -z)
	[[ -r compress-level ]] && rsync_options=($rsync_options --compress-level="$(<compress-level)")
	[[ -r exclude ]] && rsync_options=($rsync_options --exclude-from="$(pwd)/exclude")
	[[ -r files ]] && rsync_options=($rsync_options --files-from="$(pwd)/files")
	[[ -r filter ]] && rsync_options=($rsync_options $(sed 's/^/--filter /' <filter))
	[[ -r include ]] && rsync_options=($rsync_options --include-from="$(pwd)/include")
	[[ -r log-file-format ]] && LOGFORMAT="$(<log-file-format)" || LOGFORMAT="$DEFAULT_LOGFORMAT"
	{ [[ -e log-file ]] || [[ -L log-file ]] } && rsync_options=($rsync_options --log-file="$(readlink -f log-file)" --log-file-format="$LOGFORMAT")	# TODO: check whether this works correctly with dangling symlinks
	[[ -e no-acls ]] || rsync_options=($rsync_options -A)
	[[ -e no-delete ]] || rsync_options=($rsync_options --delete)
	[[ -e no-delete-excluded ]] || rsync_options=($rsync_options --delete-excluded)
	[[ -e no-hard-links ]] || rsync_options=($rsync_options -H)
	[[ -e no-inplace ]] || rsync_options=($rsync_options --inplace)
	[[ -e no-inplace ]] && ! [[ -e no-sparse ]] && rsync_options=($rsync_options -S)
	[[ -e no-partial ]] || rsync_options=($rsync_options --partial)
	[[ -e no-xattrs ]] || rsync_options=($rsync_options -X)
	[[ -e no-xdev ]] || rsync_options=($rsync_options -x)
	[[ -r options ]] && rsync_options=($rsync_options "${(f)mapfile[options]}")
	[[ -r password ]] && rsync_options=($rsync_options --password-file="$(pwd)/password")
	[[ -r timelimit ]] && timelimit=(timeout --foreground -k 5 "$(<timelimit)") || unset timelimit
	[[ -r timeout ]] && rsync_options=($rsync_options --timeout="$(<timeout)") \
		|| rsync_options=($rsync_options --timeout=3600)
	[[ -r username ]] && export LOGNAME=$(head -n 1 username)
	export RSYNC_OPTIONS="${(F)rsync_options[@]}" # make this available to pre-client and post-client scripts; we do it this way because it's impossible to export arrays. Downstream scripts can get the array back using the syntax "rsync_options=(${(f)RSYNC_OPTIONS})", provided there are no meaningful newline characters in rsync_options (there shouldn't be).
	( # subshell so that we can redirect stdout/stderr safely, as well as use 'exit'
		local lockfile=url	# this file is known to exist; might as well use it as a lockfile. Might cause problems on read-only filesystems, but we'll cross that bridge when we get to it.
		if ! zsystem flock -f lockfd -t 1 $lockfile; then
			die "Can't lock $lockfile; another instance is probably already processing $zbSOURCENAME."
		fi

		export starttime=$EPOCHSECONDS

		update_metadata

		[[ -e stdout ]] && exec >stdout || { start_logger; exec >&p }
		[[ -e stderr ]] && exec 2>stderr || { start_logger; exec 2>&p }

		if [[ -x check ]]; then
			./check
			check_result="$?"
			echo $check_result >check-exit-status	# TODO: maybe output files like this one should go to a subdirectory?
			[[ "$check_result" = "0" ]] || {
				echo "$EPOCHSECONDS CHECKFAILED_$check_result $zbSOURCENAME"
				zsystem flock -u $lockfd
				exit $check_result
			}
		fi

# Not reached if check_result != 0
		if [[ -x pre-client ]]; then
			./pre-client
			preclient_exit="$?"
			echo $preclient_exit >pre-client-exit-status
		else
			preclient_exit="0"
		fi
		if [[ -d pre-client.d/. ]]; then
			run-parts --report ./pre-client.d
			preclientd_exit="$?"
			((preclient_exit+=preclientd_exit))
			echo $preclientd_exit >pre-client.d-exit-status
		else
			preclientd_exit="0"
		fi

		update_metadata
		if [[ -n "$snapshot_name" ]]; then
			echo "$snapshot_name" >last-backed-up-snapshot-name
			echo "$snapshot_created" >last-backed-up-snapshot-creation
			touch --date @$snapshot_created last-backed-up-snapshot-creation
		fi

		if [[ "$preclient_exit" = "0" ]] && [[ "$preclientd_exit" = "0" ]]; then
			# sub-sources must be processed before the parent source because this ensures that if the backup server creates a recursive snapshot at the end of the parent run, it'll include a consistent copy of the sub-filesystems as well.
			if [[ -d "$zbSOURCENAME/subsources.d" ]]; then
				subsource_exit=0
				for subsource in "$zbSOURCENAME/subsources.d/"*(/N); do
					process_source "${subsource:A}"
					ss_exit=$?
					if ((ss_exit)); then
						echo "$0: WARNING: subsource ${subsource:A} exited with nonzero return code $ss_exit." >&2
						((subsource_exit+=ss_exit))
					fi
				done
			fi
			[[ -f path ]] && mypath="$(head -n 1 path)"
			[[ -f path ]] || mypath=path/.
			if [[ -z "$mypath" ]]; then
# this is an internal error that I want to be sure is logged (and we shouldn't run rsync with an empty $mypath).
				echo "$0: FATAL: mypath variable was empty while processing $zbSOURCENAME." >&2
				rsync_exit=111
			else
				for kludge in {1..10}; do	# switching to auto-mounted zfs snapshots doesn't always work on the first try on some kernels
					cd "$mypath" && cdsuccess=1 && break
					sleep 0.5
				done
				if [[ "$cdsuccess" = "1" ]]; then
					if [[ -f "$zbSOURCENAME/no-recursive" ]]; then
						echo "$0: INFO: Only performing pro forma sync as 'no-recursive' flag exists." >&2
						local -a delete=(--delete -d --dirs --recursive --delete-excluded)
						rsync_options=(${rsync_options:|delete})	# rsync will error out if --delete passed without --recursive
						export RSYNC_OPTIONS="${(F)rsync_options[@]}"	# re-export because the options just changed
					else
						rsync_options=($rsync_options --recursive)	# the no-recursive flag file can be created and removed dynamically by pre-client scripts; the point of performing a non-recursive backup of "." is to force a server-side snapshot to be created without traversing the (presumably unchanged) local fs
						export RSYNC_OPTIONS="${(F)rsync_options[@]}"	# re-export because the options just changed
					fi
					$timelimit rsync --links --perms --times --group --owner --devices --specials $rsync_options[@] . "$url"
					rsync_exit="$?"
					echo $rsync_exit >"$zbSOURCENAME/rsync-exit-status"
					if [[ "$rsync_exit" = 0 ]]; then
						touch "$zbSOURCENAME/stamp-success"
						rm -f "$zbSOURCENAME/stamp-failure" 2>/dev/null
						if [[ -n "$snapshot_name" ]]; then
							echo "$snapshot_name" >$zbSOURCENAME/last-successfully-backed-up-snapshot-name
							echo "$snapshot_created" >$zbSOURCENAME/last-successfully-backed-up-snapshot-creation
							touch --date @$snapshot_created $zbSOURCENAME/last-successfully-backed-up-snapshot-creation
						fi
					else
						# we don't remove stamp-success because it can be used to keep track of when the last successful backup took place
						echo "rsync returned $rsync_exit" >"$zbSOURCENAME/stamp-failure"
					fi
				else
					echo "$0: FATAL: unable to chdir to $mypath." >&2 >"$zbSOURCENAME/stamp-failure"
					rsync_exit=111
				fi
			fi
		else
			: >"$zbSOURCENAME/stamp-failure"
			((preclient_exit)) && echo "pre-client returned $preclient_exit" >>"$zbSOURCENAME/stamp-failure"
			((preclientd_exit)) && echo "pre-client.d returned $preclient_exit" >>"$zbSOURCENAME/stamp-failure"
		fi
		cd "$zbSOURCENAME"
		if [[ -x post-client ]]; then
			./post-client "$preclient_exit" "$preclientd_exit" "$rsync_exit" "$subsource_exit"
			postclient_exit=$?
			echo $postclient_exit >post-client-exit-status
		else
			postclient_exit=0
		fi
		if [[ -d post-client.d ]]; then
			run-parts --report --arg "$preclient_exit" --arg "$preclientd_exit" --arg "$rsync_exit" --arg "$subsource_exit" post-client.d
			postclientd_exit="$?"
			((postclient_exit+=postlientd_exit))
			echo $postclientd_exit >post-client.d-exit-status
		else
			postclientd_exit=0
		fi

# logging (will become inventory later)
		update_metadata
		echo -n "$EPOCHSECONDS "
		if [[ $preclient_exit = 0 ]]; then
			if [[ $rsync_exit = 0 ]]; then
				echo -n "RSYNC_SUCCESS "
			else
				echo -n "RSYNC_FAIL_$rsync_exit "
			fi
		else
			echo -n "PRECLIENT_FAIL_$preclient_exit "
		fi
		echo -n "$zbSOURCENAME "
		echo -n "$fsuuid "
		echo -n "$url "
		echo -n "$fstype "
		echo -n "$snapshot_name "
		echo -n "$snapshot_created "
		echo -n "$preclient_exit "
		echo -n "$postclient_exit "
		echo "$starttime"
		echo $[rsync_exit+postclient_exit+postclientd_exit] >zfsbackup-client-exit-status
		zsystem flock -u $lockfd
		exit $[rsync_exit+postclient_exit+postclientd_exit]
	)
	return $?
}

### main program ###
# process --server argument(s) if any:
if [[ "$1" == "--server" ]]; then
	shift
	backupservers=(${=1//,/ })
	shift
fi

# process source specifications given on command line
if [[ -n "$1" ]]; then
	while [[ -n "$1" ]]; do
		case "${1[1]}" in
			/)	# absolute source name; work out whether it's under the sources.d root of one of the backupservers
				sources_to_backup=($sources_to_backup[@] "$1")
				if [[ -z "$BACKUPSERVERS" ]]; then	# only one, unnamed server
					source_to_server[$1]=""
				else	# there are named backupservers
					for BACKUPSERVER in $backupservers[@]; do
						[[ -r /etc/zfsbackup/client.conf ]] && . /etc/zfsbackup/client.conf	# value of SOURCES can depend on BACKUPSERVER
						if ! [[ "${1##$SOURCES}" = "$1" ]]; then	# if cutting of $SOURCES from the beginning of $1 yields anything but $1, then $1 begins with $SOURCES and $1 is a source that is backed up to $BACKUPSERVER
							source_to_server[$1]=$BACKUPSERVER
							break
						fi
					done
				fi;;
			*)	# relative source name; find all sources.d directories that have it
				if [[ -z "$BACKUPSERVERS" ]]; then	# only one, unnamed server
					if [[ -d "$1/." ]]; then
						abspath="$(readlink -f $1/.)"
						sources_to_backup=($sources_to_backup[@] "$abspath")
						source_to_server[$abspath]=""
					else
						log warning "$1 is not a valid path to a backup source config directory. Skipping."
					fi
				else	# there are named backupservers
					found=0
					for BACKUPSERVER in $backupservers[@]; do
						[[ -r /etc/zfsbackup/client.conf ]] && . /etc/zfsbackup/client.conf	# value of SOURCES can depend on BACKUPSERVER
						if [[ -d $SOURCES/$1/. ]]; then
							abspath="$(readlink -f $SOURCES/$1/.)"
							sources_to_backup=($sources_to_backup[@] "$abspath")
							source_to_server[$abspath]=$BACKUPSERVER
							found=1
						fi
					done
					((found)) || log warning "$1 is not a valid path to a backup source config directory. Skipping."
				fi;;
		esac
		shift
	done
else	# nothing on command line; back up everything
	if [[ -n $backupservers ]]; then
		for BACKUPSERVER in $backupservers[@]; do
			[[ -r /etc/zfsbackup/client.conf ]] && . /etc/zfsbackup/client.conf	# value of SOURCES can depend on BACKUPSERVER
			for i in $SOURCES/*(/); do
				sources_to_backup=($sources_to_backup[@] $i)
				source_to_server[$i]=$BACKUPSERVER
			done
		done
	else	# only a single, unnamed server exists
		for i in $SOURCES/*(/); do
			sources_to_backup=($sources_to_backup[@] $i)
			source_to_server[$i]=""
		done
	fi
fi

[[ -z "$sources_to_backup[@]" ]] && exit 0	# nothing to do

# loop over sources that need to be backed up
for zbSOURCENAME in "$sources_to_backup[@]"; do

	# make this available to pre-client and post-client scripts
	export BACKUPSERVER=$source_to_server[$zbSOURCENAME]
	process_source $zbSOURCENAME
	((final_exit_status+=$?))
done # for zbSOURCENAME in "$sources_to_backup[@]"; do
exit $final_exit_status
