#!/bin/zsh
#
# This is a zfsbackup client-side pre-client script.
#
# It always exits successfully.
#
# Creates "no-recursive" if the filesystem named in ./zfs-dataset definitely hasn't changed since it was last backed up (and thus doesn't need to be backed up now).
# Creating "no-recursive" causes zfsbackup-client to just rsync "." itself, but still triggers a server-side snapshot (so that yearly/monthly/weekly/etc. snapshots will still exist there even if no full backup is performed).
#
# If the snapshot the last successful backup is based on still exists, we check written@snapname property; if that's zero, the fs hasn't changed.
# If that snapshot no longer exists, we find the latest one that predates the backup and check the written@snapname property on that one -- if it's still 0, the fs hasn't changed since that time, so it can't have changed since the last backup either.
#
# If we can't rule out that the filesystem changed since the last backup, we remove "no-recursive".
#
# TODO: optionally(?), use zfs diff to create a "files-from" file for rsync?

function no_recursion() {
	touch no-recursive
	exit 0
}

function do_recursion() {
	rm -f no-recursive
	exit 0
}

[[ -f no-xdev ]] && do_recursion # there are sub-filesystems and we have no idea whether they changed; enable recursion
[[ -f stamp-success ]] || do_recursion	# no successful backup yet, so yes, proceed
[[ -f last-successfully-backed-up-snapshot-name ]] || do_recursion	# no data on last backed up snapshot, proceed

zmodload zsh/stat

myfs="${1:-$(head -n 1 zfs-dataset)}"
last_success=$(zstat +mtime stamp-success)
snapshot_name=$(<last-successfully-backed-up-snapshot-name)
if snapshot_created=$(zfs get -Hp -o value creation $snapshot_name); then	# only query this to make sure the snapshot still exists
	[[ $(zfs get -Hp -o value written@$snapshot_name $myfs) = 0 ]] && no_recursion
fi
# The above was the easy bit; we had the exact same snapshot that was used to create the backup. If we're still running, that snapshot no longer exists.
# Now we need to find all snapshots in decreasing order of creation time; skip the ones that are younger than the last successful backup; and check the youngest that predates the backup.

zfs list -d 1 -t snapshot -S creation -Hp -o name,creation $myfs | while read snapshot_name snapshot_created; do
	[[ $snapshot_created -ge $last_success ]] && continue	# greater or equal; if equal, snapshot could have been taken just after successful backup, and could conceivably contain new writes
	[[ $(zfs get -Hp -o value written@$snapshot_name $myfs) = 0 ]] && no_recursion
	do_recursion
done
do_recursion	# there was no snaphot that predates the last backup, so we can't say for certain whether the fs changed; the safe bet is to force recursion
