#!/bin/zsh
#
# This is intended as a runit service for zfsbackup clients, but it can also
# be run from cron instead of zfsbackup-client itself. If you run it from
# cron, it's probably prudent to make sure only one instance can run at a
# time.
#
# On startup, if the system has been up for less than a configurable amount
# of time (defaults to 1 hour), it sleeps for a configurable amount of time
# (default 12 hours), then invokes zfsbackup-client.
#
# If all sources.d directories are processed successfully, the service stops
# itself or sleeps a configurable amount of time (default until 22:00) and
# exits, presumably to be restarted by runit.  If the exit delay would
# result in more than $MAX_RUNTIME (see below) seconds passing between
# successive zfsbackup-client invocations, the delay is adjusted so that
# zfsbackup-client can be rerun at most $MAX_RUNTIME seconds after the
# previous run.  Note that this may result in the backup starting during
# peak hours.  TODO: add an even stronger off-peak enforcement logic.
#
# If some backups are unsuccessful (indicated by the presence of a
# stamp-failure file in the sources.d/sourcename directory), the script
# retries all failed backups in random order until they all succeed, or
# until a configurable amount of time (by default, 24 hours -- MAX_RUNTIME)
# has passed since the first time zfsbackup-client was run.  Once this time
# is reached, the script exits.  (At this point it will either be restarted
# by runit, causing zfsbackup-client to be run again, or it can be started
# again by cron.)
#
# The script will sleep for a random amount of [1;30] seconds between retry
# attempts.
#
# TODO: instead of retrying in a random order, retry in a LIFO order (retry
# sources first that have gone the longest time without being retried).

exec 2>&1
SVDIR=$(pwd)
SVNAME="${SVDIR:t}"
CONFIG=/etc/default/"$SVNAME"

SLEEP_IF_NOT_UP_FOR_MORE_THAN=3600	# seconds
ONBOOT_SLEEP=12h
EXIT_ACTION=sleep-and-exit	# can also be stop-service or just exit
EXIT_SLEEP_UNTIL=22:00	# if set, sleep until this time before exiting
EXIT_SLEEP_FIXED=18h	# if EXIT_SLEEP_UNTIL is unset, sleep this
			# amount of time before exiting
LOG_LEVEL=info		# possible levels: emerg alert crit err warning notice info debug
MAX_RUNTIME=86400	# maximum number of seconds since first zfsbackup-client run as
			# part of this scheduled job; if we exceed this while
			# retrying failed backups, the script aborts
LOADWATCH_HIGH=100	# what system load level to suspend backup processes at
LOADWATCH_LOW=10	# what system load level to resume suspended
			# backup processes at
CHRT=(chrt -i 0
nice -n 19)		# used as a command prefix; the default runs the backup
			# with the SCHED_IDLE scheduler at nice 19, reducing its priority.
SOURCES=/etc/zfsbackup/sources.d

USE_SYSLOG=0
DEFAULT_FUNCTIONS=/usr/local/share/zfsbackup/functions.zsh
. $DEFAULT_FUNCTIONS
[[ -r /etc/zfsbackup/client.conf ]] && . /etc/zfsbackup/client.conf
[[ -r /etc/zfsbackup/${0:t}.conf ]] && . /etc/zfsbackup/${0:t}.conf
[[ -n $USER_FUNCTIONS ]] && [[ -r $USER_FUNCTIONS ]] && . $USER_FUNCTIONS	# allow user functions to override default functions

me=$SVNAME

zmodload zsh/datetime

[[ -r "$CONFIG" ]] && . "$CONFIG"

if ((verbose)); then	# the old behaviour was to print informational messages if VERBOSE=1; translate that to a log level of at least info now (only debug would be higher)
	[[ $LOG_LEVEL = debug ]] || LOG_LEVEL=info
fi
	
function error_exit() { # doesn't return
	case "$EXIT_ACTION" in
		stop-service)	exec sv d "$SVDIR" ;;
		*)		exit 111 ;;
	esac
}

function sleep_and_exit() { # doesn't return
	if [[ -n "$EXIT_SLEEP_UNTIL" ]]; then
		maxdelay=$[ZFSBACKUP_TIME+MAX_RUNTIME-EPOCHSECONDS]	# we can't sleep more than this or we miss the MAX_RUNTIME deadline
		delay=$[$(date --date "$EXIT_SLEEP_UNTIL" '+%s')-EPOCHSECONDS]
		[[ "$delay" -lt 0 ]] && delay="$[$(date --date "tomorrow $EXIT_SLEEP_UNTIL" '+%s')-EPOCHSECONDS]"	# the given time is already past today
		[[ "$delay" -gt "$maxdelay" ]] && delay=$maxdelay
		[[ "$delay" -lt 0 ]] && { log notice "Ooops, we're behind schedule, zfsbackup-client should already be running; exiting"; exit 2 }
		log info "Sleeping until $(date --date now\ +\ $delay\ seconds)."
		exec sleep $delay
	else
		exec sleep $EXIT_SLEEP_FIXED
	fi
}

if [[ -n "$SLEEP_IF_NOT_UP_FOR_MORE_THAN" ]]; then
# uptime -s is a linuxism and requires very recent procps, so parse
# /proc/uptime instead
#	UP_FOR_SECS=$[EPOCHSECONDS-$(date --date "$(uptime -s)" '+%s')]
	UP_FOR_SECS=$(cut -d' ' -f1 /proc/uptime)
	if [[ "$UP_FOR_SECS" -le "$SLEEP_IF_NOT_UP_FOR_MORE_THAN" ]] && [[ -n "$ONBOOT_SLEEP" ]]; then
		[[ $ONBOOT_SLEEP[$#ONBOOT_SLEEP] =~ [[:digit:]] ]] && PRINT_ONBOOT_SLEEP="$ONBOOT_SLEEP seconds" || PRINT_ONBOOT_SLEEP="$ONBOOT_SLEEP"
		log info "It seems we booted recently (uptime is $UP_FOR_SECS seconds), sleeping $PRINT_ONBOOT_SLEEP." >&2
		sleep "$ONBOOT_SLEEP"
	fi
fi
ZFSBACKUP_TIME=$EPOCHSECONDS
if [[ -x /usr/bin/loadwatch ]] && [[ -n "$LOADWATCH_HIGH" ]] && [[ -n "$LOADWATCH_LOW" ]]; then
	loadwatch=(loadwatch -h $LOADWATCH_HIGH -l $LOADWATCH_LOW --)
else
	unset loadwatch
fi
$CHRT $loadwatch zfsbackup-client "$ZFSBACKUP_CLIENT_ARGS[@]"
cd $SOURCES || {
	log crit "can't chdir to $SOURCES."
	error_exit
}

flag_fail=1

while ((flag_fail)); do
	failure_stamps=(*/stamp-failure(N))
	flag_fail=$#failure_stamps
	((flag_fail)) || break	# no failures, skip rest of loop
	failed_sources=(${failure_stamps:h})
	for source in $(echo "$failed_sources[@]" | tr ' ' '\n' | sort -R); do
		if [[ "$[EPOCHSECONDS-ZFSBACKUP_TIME]" -gt "$MAX_RUNTIME" ]]; then
			log notice "MAX_RUNTIME exceeded; exiting so zfsbackup-client can be run again."
			exit 2
		else
			sleep $[RANDOM%29+1]
			log info "Retrying $source."
			[[ -f "$source/stderr" ]] && {
				log info "Dumping stderr output from last $source run onto own stderr."
				cat "$source/stderr" >&2
			}
			$CHRT $loadwatch zfsbackup-client "$ZFSBACKUP_CLIENT_ARGS[@]" "$source"
		fi
	done
done

case "$EXIT_ACTION" in
	stop-service)	exec sv d "$SVDIR" ;;
	exit)		exit 0 ;;
	sleep-and-exit)	sleep_and_exit ;;
	*)		die "Unknown EXIT_ACTION '$EXIT_ACTION'. Aborting.";;
esac
